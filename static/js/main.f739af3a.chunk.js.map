{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","api/posts.ts","components/Loader/Loader.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","selectPostId","selectedPostId","className","map","post","userId","title","type","onClick","id","BASE_URL","getPosts","fetch","then","result","json","catch","Response","Error","getPostDetails","postId","getPostComments","Loader","NewCommentForm","name","email","body","changeName","changeEmail","changeBody","addComment","onSubmit","event","preventDefault","placeholder","value","onChange","required","pattern","PostDetails","selectPostDetails","useState","postName","setPostName","postEmail","setPostEmail","postBody","setPostBody","showComments","setShowComments","postComments","setPostComments","isLoadingComments","setIsloadingComments","isLoadingForm","setIsloadingForm","loadComments","a","loadPostComments","showOrHideComments","uniqueId","numbers","length","match","method","headers","JSON","stringify","createdAt","Date","updatedAt","addCom","removeComment","comment","commentId","remComment","target","App","setPosts","users","setUsers","setSelectedPostId","setSelectPostDetails","isLoading","setIsloading","isLoadingDetails","setIsloadingDetails","useEffect","showPosts","showAllPosts","showUsers","showAllUsers","filterPosts","showAllUserPosts","selectedPost","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f739af3a.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../../types/Post';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[];\n  selectPostId: (postId: number) => void;\n  selectedPostId: number | null;\n};\n\nexport const PostsList: React.FC<Props> = (\n  {\n    posts,\n    selectPostId,\n    selectedPostId,\n  },\n) => {\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\" data-cy=\"postDetails\">\n        {posts.map(post => (\n          <li key={post.id} className=\"PostsList__item\">\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => selectPostId(post.id)}\n            >\n              {selectedPostId === post.id ? 'Close' : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from './api';\n\nexport const getUsers = () => {\n  return fetch(`${BASE_URL}/users`)\n    .then(result => result.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n};\n\nexport const getPosts = () => {\n  return fetch(`${BASE_URL}/posts`)\n    .then(result => result.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n};\n\nexport const getComments = () => {\n  return fetch(`${BASE_URL}/comments`)\n    .then(result => result.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n};\n\nexport const getUserPosts = (userId: number) => {\n  return fetch(`${BASE_URL}/posts?userId=${userId}`)\n    .then(result => result.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n};\n\nexport const getPostDetails = (postId: number) => {\n  return fetch(`${BASE_URL}/posts/${postId}`)\n    .then(result => result.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n};\n\nexport const getPostComments = (postId: number) => {\n  return fetch(`${BASE_URL}/comments?postId=${postId}`)\n    .then(result => result.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n};\n\nexport const deleteComments = (commentId: number) => {\n  return fetch(`${BASE_URL}/comments/${commentId}`, { method: 'DELETE' })\n    .then(result => result.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n};\n\nexport const addComments\n  = (name: string, email: string, body: string,\n    id: () => Promise<number>, postId: number) => {\n    return fetch(`${BASE_URL}/comments/`, {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n      body: JSON.stringify({\n        id,\n        postId,\n        name,\n        email,\n        body,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      }),\n    })\n      .then(result => result.json())\n      .catch(() => ({\n        Response: 'False',\n        Error: 'unexpected error',\n      }));\n  };\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  name: string;\n  email: string;\n  body: string;\n  changeName: (value: React.ChangeEvent<HTMLInputElement>) => void;\n  changeEmail: (value: React.ChangeEvent<HTMLInputElement>) => void;\n  changeBody: (value: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  addComment: () => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = (\n  {\n    name,\n    email,\n    body,\n    changeName,\n    changeEmail,\n    changeBody,\n    addComment,\n  },\n) => {\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={changeName}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={changeEmail}\n          pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$\"\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={changeBody}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n        onClick={addComment}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport {\n  addComments,\n  deleteComments,\n  getComments,\n  getPostComments,\n} from '../../api/posts';\nimport { Comment } from '../../types/Comment';\nimport { Post } from '../../types/Post';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  selectPostDetails: Post | null;\n  selectedPostId: number | null;\n};\n\nexport const PostDetails: React.FC<Props> = (\n  {\n    selectPostDetails,\n    selectedPostId,\n  },\n) => {\n  const [postName, setPostName] = useState<string>('');\n  const [postEmail, setPostEmail] = useState<string>('');\n  const [postBody, setPostBody] = useState<string>('');\n  const [showComments, setShowComments] = useState<boolean>(false);\n  const [postComments, setPostComments] = useState<Comment[]>([]);\n  const [isLoadingComments, setIsloadingComments] = useState<boolean>(false);\n  const [isLoadingForm, setIsloadingForm] = useState<boolean>(false);\n\n  const changeName = (value: React.ChangeEvent<HTMLInputElement>) => {\n    setPostName(value.target.value);\n  };\n\n  const changeEmail = (value: React.ChangeEvent<HTMLInputElement>) => {\n    setPostEmail(value.target.value);\n  };\n\n  const changeBody = (value: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setPostBody(value.target.value);\n  };\n\n  const loadComments = async (postId: number) => {\n    const loadPostComments = await getPostComments(postId);\n\n    setIsloadingComments(false);\n    setPostComments(loadPostComments);\n  };\n\n  const showOrHideComments = async () => {\n    setIsloadingComments(true);\n    if (showComments) {\n      setShowComments(false);\n    } else {\n      setShowComments(true);\n    }\n\n    if (selectedPostId) {\n      loadComments(selectedPostId);\n    }\n  };\n\n  const uniqueId = async () => {\n    const numbers: Comment[] = await getComments();\n\n    return numbers[numbers.length - 1].id + 1;\n  };\n\n  const addComment = async () => {\n    const emailPattern = '[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,}$';\n\n    if (!postName\n      || !postEmail || !postEmail.match(emailPattern) || !postBody) {\n      return null;\n    }\n\n    setIsloadingComments(true);\n    setIsloadingForm(true);\n\n    if (selectedPostId) {\n      const addCom\n      = await addComments(\n        postName,\n        postEmail,\n        postBody,\n        uniqueId,\n        selectedPostId,\n      );\n\n      loadComments(selectedPostId);\n      setPostName('');\n      setPostEmail('');\n      setPostBody('');\n      setIsloadingForm(false);\n\n      return addCom;\n    }\n\n    return null;\n  };\n\n  const removeComment = async (comment: Comment) => {\n    setIsloadingComments(true);\n    const remComment = await deleteComments(comment.id);\n\n    loadComments(comment.postId);\n\n    return remComment;\n  };\n\n  if (!selectPostDetails) {\n    return null;\n  }\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{selectPostDetails.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\" data-cy=\"postList\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={showOrHideComments}\n        >\n          {showComments ? 'Hide comments' : 'Show comments'}\n        </button>\n\n        {showComments && (\n          isLoadingComments ? <Loader /> : (\n            <ul className=\"PostDetails__list\">\n              {postComments.length > 0\n                ? (postComments.map(comment => (\n                  <li className=\"PostDetails__list-item\" key={comment.id}>\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => removeComment(comment)}\n                    >\n                      X\n                    </button>\n                    <p>{comment.body}</p>\n                  </li>\n                )))\n                : 'No comments yet'}\n            </ul>\n          )\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          {isLoadingForm\n            ? <Loader />\n            : (\n              <NewCommentForm\n                addComment={addComment}\n                name={postName}\n                email={postEmail}\n                body={postBody}\n                changeName={changeName}\n                changeEmail={changeEmail}\n                changeBody={changeBody}\n              />\n            )}\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport {\n  getPostDetails,\n  getPosts,\n  getUserPosts,\n  getUsers,\n} from './api/posts';\nimport { Post } from './types/Post';\nimport { User } from './types/User';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedPostId, setSelectedPostId] = useState<number | null>(null);\n  const [selectPostDetails, setSelectPostDetails] = useState<Post | null>(null);\n  const [isLoading, setIsloading] = useState<boolean>(true);\n  const [isLoadingDetails, setIsloadingDetails] = useState<boolean>(true);\n\n  useEffect(() => {\n    const showPosts = async () => {\n      const showAllPosts = await getPosts();\n\n      setIsloading(false);\n      setPosts(showAllPosts);\n    };\n\n    showPosts();\n\n    const showUsers = async () => {\n      const showAllUsers = await getUsers();\n\n      setUsers(showAllUsers);\n    };\n\n    showUsers();\n  }, []);\n\n  const filterPosts = async (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setIsloading(true);\n    let showAllUserPosts;\n\n    if (+event.target.value === 0) {\n      showAllUserPosts = await getPosts();\n    } else {\n      showAllUserPosts = await getUserPosts(+event.target.value);\n    }\n\n    setIsloading(false);\n    setPosts(showAllUserPosts);\n  };\n\n  const selectPostId = async (postId: number) => {\n    setIsloadingDetails(true);\n\n    if (selectedPostId === postId) {\n      setSelectedPostId(null);\n    } else {\n      setSelectedPostId(postId);\n    }\n\n    const selectedPost = await getPostDetails(postId);\n\n    setIsloadingDetails(false);\n    setSelectPostDetails(selectedPost);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select className=\"App__user-selector\" onChange={filterPosts}>\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option value={user.id} key={user.id}>{user.name}</option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {isLoading\n            ? <Loader />\n            : (\n              <PostsList\n                posts={posts}\n                selectPostId={selectPostId}\n                selectedPostId={selectedPostId}\n              />\n            )}\n        </div>\n\n        {selectedPostId && (\n          <div className=\"App__content\">\n            {isLoadingDetails\n              ? <Loader />\n              : (\n                <PostDetails\n                  selectPostDetails={selectPostDetails}\n                  selectedPostId={selectedPostId}\n                />\n              )}\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}