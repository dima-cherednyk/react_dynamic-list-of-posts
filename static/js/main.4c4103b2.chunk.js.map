{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","utils/fetchClient.ts","api/posts.ts","utils/validation.ts","components/Loader/Loader.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","selectPostId","selectedPostId","className","map","post","userId","title","type","onClick","id","BASE_URL","request","url","method","data","options","body","JSON","stringify","headers","fetch","then","response","ok","Error","json","client","getPosts","getPostDetails","postId","getPostComments","addComments","comment","validation","postName","postEmail","postBody","match","Loader","NewCommentForm","name","email","changeName","changeEmail","changeBody","addComment","onSubmit","event","preventDefault","placeholder","value","onChange","required","pattern","PostDetails","selectPostDetails","useState","setPostName","setPostEmail","setPostBody","isCommentVisible","setIsCommentVisible","postComments","setPostComments","isLoadingComments","setIsloadingComments","isLoadingForm","setIsloadingForm","loadComments","a","loadPostComments","uniqueId","numbers","length","createdAt","Date","updatedAt","addCom","removeComment","commentId","deleteComment","target","App","setPosts","users","setUsers","selectedUserId","setSelectedUserId","setSelectedPostId","setSelectPostDetails","isLoading","setIsloading","isLoadingDetails","setIsloadingDetails","useEffect","loadPosts","loadAllPosts","loadUsers","loadAllUsers","loadUserPosts","loadAllUserPosts","filterPosts","selectedPost","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4c4103b2.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../../types/Post';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[];\n  selectPostId: (postId: number) => void;\n  selectedPostId: number | null;\n};\n\nexport const PostsList: React.FC<Props> = (\n  {\n    posts,\n    selectPostId,\n    selectedPostId,\n  },\n) => {\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\" data-cy=\"postDetails\">\n        {posts.map(post => (\n          <li key={post.id} className=\"PostsList__item\">\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => selectPostId(post.id)}\n            >\n              {selectedPostId === post.id ? 'Close' : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n","import { BASE_URL } from '../api/api';\nimport { Comment } from '../types/Comment';\n\ntype RequestMethod = 'GET' | 'POST' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: Comment | null = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return fetch(BASE_URL + url, options)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: Comment) => request<T>(url, 'POST', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPosts = () => {\n  return client.get<Post[]>('/posts');\n};\n\nexport const getComments = () => {\n  return client.get<Comment[]>('/comments');\n};\n\nexport const getUserPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getPostDetails = (postId: number) => {\n  return client.get<Post>(`/posts/${postId}`);\n};\n\nexport const getPostComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComments = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const addComments = (comment: Comment) => {\n  return client.post<Comment>('/comments', comment);\n};\n","export const validation = (\n  postName: string,\n  postEmail: string,\n  postBody: string,\n) => {\n  const emailPattern = '[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,}$';\n\n  if (!postName\n    || !postEmail || !postEmail.match(emailPattern) || !postBody) {\n    return false;\n  }\n\n  return true;\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  name: string;\n  email: string;\n  body: string;\n  changeName: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  changeEmail: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  changeBody: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  addComment: () => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = (\n  {\n    name,\n    email,\n    body,\n    changeName,\n    changeEmail,\n    changeBody,\n    addComment,\n  },\n) => {\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={changeName}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={changeEmail}\n          pattern=\"[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$\"\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={changeBody}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n        onClick={addComment}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport {\n  addComments,\n  deleteComments,\n  getComments,\n  getPostComments,\n} from '../../api/posts';\nimport { Comment } from '../../types/Comment';\nimport { Post } from '../../types/Post';\nimport { validation } from '../../utils/validation';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  selectPostDetails: Post | null;\n  selectedPostId: number | null;\n};\n\nexport const PostDetails: React.FC<Props> = (\n  {\n    selectPostDetails,\n    selectedPostId,\n  },\n) => {\n  const [postName, setPostName] = useState<string>('');\n  const [postEmail, setPostEmail] = useState<string>('');\n  const [postBody, setPostBody] = useState<string>('');\n  const [isCommentVisible, setIsCommentVisible] = useState<boolean>(false);\n  const [postComments, setPostComments] = useState<Comment[]>([]);\n  const [isLoadingComments, setIsloadingComments] = useState<boolean>(false);\n  const [isLoadingForm, setIsloadingForm] = useState<boolean>(false);\n\n  const changeName = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setPostName(event.target.value);\n  };\n\n  const changeEmail = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setPostEmail(event.target.value);\n  };\n\n  const changeBody = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setPostBody(event.target.value);\n  };\n\n  const loadComments = async (postId: number) => {\n    const loadPostComments = await getPostComments(postId);\n\n    setIsloadingComments(false);\n    setPostComments(loadPostComments);\n  };\n\n  const showOrHideComments = () => {\n    setIsloadingComments(true);\n    if (isCommentVisible) {\n      setIsCommentVisible(false);\n    } else {\n      setIsCommentVisible(true);\n    }\n\n    if (selectedPostId) {\n      loadComments(selectedPostId);\n    }\n  };\n\n  const uniqueId = async () => {\n    const numbers: Comment[] = await getComments();\n\n    return numbers[numbers.length - 1].id + 1;\n  };\n\n  const addComment = async () => {\n    if (!validation(postName, postEmail, postBody)) {\n      return null;\n    }\n\n    setIsloadingComments(true);\n    setIsloadingForm(true);\n\n    if (selectedPostId) {\n      const comment = {\n        name: postName,\n        email: postEmail,\n        body: postBody,\n        id: +uniqueId,\n        postId: selectedPostId,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      const addCom\n      = await addComments(comment);\n\n      loadComments(selectedPostId);\n      setPostName('');\n      setPostEmail('');\n      setPostBody('');\n      setIsloadingForm(false);\n\n      return addCom;\n    }\n\n    return null;\n  };\n\n  const removeComment = async (comment: Comment) => {\n    setIsloadingComments(true);\n    const deleteComment = await deleteComments(comment.id);\n\n    loadComments(comment.postId);\n\n    return deleteComment;\n  };\n\n  if (!selectPostDetails) {\n    return null;\n  }\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{selectPostDetails.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\" data-cy=\"postList\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={showOrHideComments}\n        >\n          {isCommentVisible ? 'Hide comments' : 'Show comments'}\n        </button>\n\n        {isCommentVisible && (\n          isLoadingComments ? <Loader /> : (\n            <ul className=\"PostDetails__list\">\n              {postComments.length > 0\n                ? (postComments.map(comment => (\n                  <li className=\"PostDetails__list-item\" key={comment.id}>\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => removeComment(comment)}\n                    >\n                      X\n                    </button>\n                    <p>{comment.body}</p>\n                  </li>\n                )))\n                : 'No comments yet'}\n            </ul>\n          )\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          {isLoadingForm\n            ? <Loader />\n            : (\n              <NewCommentForm\n                addComment={addComment}\n                name={postName}\n                email={postEmail}\n                body={postBody}\n                changeName={changeName}\n                changeEmail={changeEmail}\n                changeBody={changeBody}\n              />\n            )}\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport {\n  getPostDetails,\n  getPosts,\n  getUserPosts,\n  getUsers,\n} from './api/posts';\nimport { Post } from './types/Post';\nimport { User } from './types/User';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState<number>(0);\n  const [selectedPostId, setSelectedPostId] = useState<number | null>(null);\n  const [selectPostDetails, setSelectPostDetails] = useState<Post | null>(null);\n  const [isLoading, setIsloading] = useState<boolean>(false);\n  const [isLoadingDetails, setIsloadingDetails] = useState<boolean>(false);\n\n  useEffect(() => {\n    setIsloading(true);\n    const loadPosts = async () => {\n      const loadAllPosts = await getPosts();\n\n      setIsloading(false);\n      setPosts(loadAllPosts);\n    };\n\n    loadPosts();\n\n    const loadUsers = async () => {\n      const loadAllUsers = await getUsers();\n\n      setUsers(loadAllUsers);\n    };\n\n    loadUsers();\n  }, []);\n\n  useEffect(() => {\n    const loadUserPosts = async () => {\n      let loadAllUserPosts;\n\n      if (selectedUserId === 0) {\n        loadAllUserPosts = await getPosts();\n      } else {\n        loadAllUserPosts = await getUserPosts(selectedUserId);\n      }\n\n      setIsloading(false);\n      setPosts(loadAllUserPosts);\n    };\n\n    loadUserPosts();\n  }, [selectedUserId]);\n\n  const filterPosts = async (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setIsloading(true);\n    setSelectedUserId(+event.target.value);\n  };\n\n  const selectPostId = async (postId: number) => {\n    setIsloadingDetails(true);\n\n    if (selectedPostId === postId) {\n      setSelectedPostId(null);\n    } else {\n      setSelectedPostId(postId);\n    }\n\n    const selectedPost = await getPostDetails(postId);\n\n    setIsloadingDetails(false);\n    setSelectPostDetails(selectedPost);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select className=\"App__user-selector\" onChange={filterPosts}>\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option value={user.id} key={user.id}>{user.name}</option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {isLoading\n            ? <Loader />\n            : (\n              <PostsList\n                posts={posts}\n                selectPostId={selectPostId}\n                selectedPostId={selectedPostId}\n              />\n            )}\n        </div>\n\n        {selectedPostId && (\n          <div className=\"App__content\">\n            {isLoadingDetails\n              ? <Loader />\n              : (\n                <PostDetails\n                  selectPostDetails={selectPostDetails}\n                  selectedPostId={selectedPostId}\n                />\n              )}\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}